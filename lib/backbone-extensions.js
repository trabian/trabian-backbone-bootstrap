// Generated by CoffeeScript 1.12.7
(function() {
  var slice = [].slice;

  Backbone.View.prototype._originalConfigure = Backbone.View.prototype._configure;

  _.extend(Backbone.View.prototype, {
    _configure: function(options) {
      this._originalConfigure(options);
      this.controller = options.controller;
    },
    bindTo: function(source, event, callback) {
      if (this.bindings == null) {
        this.bindings = [];
      }
      source.on(event, callback, this);
      return this.bindings.push({
        source: source,
        event: event,
        callback: callback
      });
    },
    bindToAndTrigger: function(source, event, callback) {
      this.bindTo(source, event, callback);
      return callback();
    },
    unbindFromAll: function() {
      var binding, i, len, ref, results;
      if (this.bindings != null) {
        ref = this.bindings;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          binding = ref[i];
          results.push(binding.source.unbind(binding.event, binding.callback));
        }
        return results;
      }
    },
    leave: function() {
      this.remove();
      this.unbindFromAll();
      this.undelegateEvents();
      if (typeof this.leaveChildren === "function") {
        this.leaveChildren();
      }
      return Backbone.ModelBinding.unbind(this);
    },
    flash: function($el) {
      if (window.flash) {
        this.$el.append(this.make('p', {
          "class": 'flash'
        }, window.flash));
        return window.flash = null;
      }
    },
    bindValidations: function(validationBindings) {
      var field, fn, selector, validationPresenter;
      if (this.validationsBound) {
        return;
      }
      this.validationsBound = true;
      if (!(validationPresenter = this.options.validationPresenter)) {
        validationPresenter = new Backbone.Model;
        Backbone.Validation.bind(this, {
          valid: function(view, attr) {
            return validationPresenter.unset(attr);
          },
          invalid: function(view, attr, error) {
            return validationPresenter.set(attr, error);
          }
        });
      }
      if (!validationBindings) {
        return;
      }
      if (_.isArray(validationBindings)) {
        validationBindings = _(validationBindings).reduce(function(bindings, field) {
          bindings[field] = "[name=" + field + "]";
          return bindings;
        }, {});
      }
      fn = (function(_this) {
        return function(field, selector) {
          return _this.bindToAndTrigger(validationPresenter, "change:" + field, function() {
            return _.defer((function(_this) {
              return function() {
                var $group, $messageContainer, $textContainer, message;
                $group = _this.$(selector).closest('.control-group,.error-container');
                if (message = validationPresenter.get(field)) {
                  $group.addClass('has-error');
                  $textContainer = $group.find('.controls,.error-text');
                  $messageContainer = $textContainer.find('.help-block.error-message');
                  if (!$messageContainer.length) {
                    $messageContainer = $('<p class="help-block error-message" />').appendTo($textContainer);
                  }
                  return $messageContainer.text(message);
                } else {
                  return $group.removeClass('has-error').find('.help-block.error-message').remove();
                }
              };
            })(this));
          });
        };
      })(this);
      for (field in validationBindings) {
        selector = validationBindings[field];
        fn(field, selector);
      }
      return validationPresenter;
    }
  });

  _.extend(Backbone.Model.prototype, {
    bindAndTrigger: function(event, callback) {
      this.on(event, callback);
      return callback();
    },
    format: function(formatters) {
      var formatter, name, results;
      results = [];
      for (name in formatters) {
        formatter = formatters[name];
        results.push((function(_this) {
          return function(name, formatter) {
            var format;
            format = function() {
              var formatted, val;
              formatted = (val = _this.get(name)) ? formatter(val, _this) : '';
              return _this.set(name + "_formatted", formatted, {
                forceUpdate: true
              });
            };
            _this.on("change:" + name, format);
            return format();
          };
        })(this)(name, formatter));
      }
      return results;
    },
    toUpdateJSON: function() {
      return this.toJSON();
    },
    createAndBind: function(models) {
      var model, name, results;
      results = [];
      for (name in models) {
        model = models[name];
        results.push((function(_this) {
          return function(name, model) {
            _this[name] = model;
            _this.set(name, model.attributes);
            return model.on('change', function() {
              return _this.set(name, model.attributes);
            });
          };
        })(this)(name, model));
      }
      return results;
    },
    isDeepValid: function() {
      if (this.relatedValidationModels != null) {
        _.each(this.relatedValidationModels, function(model) {
          return model.isDeepValid();
        });
      }
      return this.isValid(true);
    },
    validateRelated: function() {
      var field, i, len, related, results;
      related = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.relatedValidationModels == null) {
        this.relatedValidationModels = [];
      }
      results = [];
      for (i = 0, len = related.length; i < len; i++) {
        field = related[i];
        results.push((function(_this) {
          return function(field) {
            return _this.bindAndTrigger("change:" + field, function() {
              var model;
              if (model = _this.get(field)) {
                _this.relatedValidationModels.push(model);
                return model.on('validated', function() {
                  return _this.set(field + "_valid", model.isValid());
                });
              }
            });
          };
        })(this)(field));
      }
      return results;
    }
  });

  Backbone.Validation.configure({
    forceUpdate: true
  });

  _.extend(Backbone.Model.prototype, Backbone.Validation.mixin);

}).call(this);
